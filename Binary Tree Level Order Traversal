/**Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
while(!q.isEmpty()){
            ArrayList<Integer> li = new ArrayList<>();
            int count = q.size();
            for(int i=0;i<count;i++){
                TreeNode node = q.remove();
                li.add(node.val);
                if(node.left!=null){
					q.add(node.left);
				}
                if(node.right!=null){
					q.add(node.right);
				}
            }
            result.add(li);
            
            
        }
*/
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        if(root==null)
        {
            return result;
        }
        queue.add(root);
        
         while(!queue.isEmpty())
        {
             List<Integer> mylist = new ArrayList<>();
             int size = queue.size();
        for(int i=0;i<size;i++)
        {
            TreeNode node = queue.remove();
            mylist.add(node.val);
            if(node.left!=null)
            queue.add(node.left);
            if(node.right!=null)
            queue.add(node.right);
        }
           result.add(mylist); 
        }
       return result; 
    }
       
}
