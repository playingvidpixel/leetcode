/*Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].

The test cases are generated so that the answer will fit in a 32-bit integer.
*/class Solution {
    public int numSubarrayBoundedMax(int[] nums, int left, int right) {
      int i=0,j=0,m=0,count=0;
        int len = nums.length;
        for(j=0;j<len;j++)
        {
          if(nums[j]>right)
          {  i=j+1;
            m=0;
          }   
        else if(nums[j]>=left && nums[j]<=right)
        {
            m=j-i+1;
            count+=m;
        }
            else
                count+=m;
        }
        return count;
    }
}
