/**
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

 
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev =null;
    int flag =1;
    public boolean isValidBST(TreeNode root) {
        if(root!=null)
        {
            if(isValidBST(root.left)==false)
                flag=0;
            if(prev!=null && prev.val>=root.val)
            {
                flag=0;
            }
            prev=root;
            System.out.println(root.val);
            if(isValidBST(root.right)==false)
            {
                flag =0;
            }
        }
        //else
         //flag =0;   
        if(flag==1)
            return true;
        else
            return false;
    }
}
